makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(inverse) inv <<- inverse
getinv <- function() inv
list(set = set, get = get, setinv = setinv, getinv= getinv)
}
trial <- makeCacheMatrix(c(1,2,3,4,5,6), 2,3)
trial <- makeCacheMatrix(data = c(1,2,3,4,5,6),nrow=2,ncol=3)
trial <- makeCacheMatrix(data = c(1,2,3,4,5,6),nrow=2,ncol=3, byrow=TRUE)
trial <- makeCacheMatrix(data = c(1,2,3,4),nrow=2,ncol=3, byrow=TRUE)
trial <- matrix(c(1,2,3,4,5,6), 2, 3)
cachematrix <- makeCacheMatrix(trial)
print(cachematrix)
cacheSolve <- function(x, ...) {
inv <- x$getinv()
if(!is.null(inv)){
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv ## Return a matrix that is the inverse of 'x'
}
cacheSolve(trial)
cacheSolve(cachematrix)
trial <- matrix(c(1,2,3,4,5,6,6,7,9), 3, 3)
cachematrix <- makeCacheMatrix(trial)
print(cachematrix)
cacheSolve(cachematrix)
